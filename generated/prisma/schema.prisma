// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  email    String  @unique
  password String?

  name    String @default("Не вказане")
  picture String @default("/uploads/no-user-image.png")

  stores Store[]

  favorites Product[]
  reviews   Review[]
  orders    Order[]

  @@map("users")
}

model Store {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  title       String
  description String?

  userId String @map("user_id")
  user   User?  @relation(fields: [userId], references: [id])

  products   Product[]
  categories Category[]
  colors     Color[]
  reviews    Review[]
  orderItems OrderItem[]

  @@map("stores")
}

model Product {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  title       String
  description String
  price       Float
  images      String[]

  storeId String? @map("store_id")
  store   Store?  @relation(fields: [storeId], references: [id])

  category   Category? @relation(fields: [categoryId], references: [id])
  categoryId String?   @map("category_id")

  color   Color?  @relation(fields: [colorId], references: [id])
  colorId String? @map("color_id")

  reviews Review[]

  user   User?   @relation(fields: [userId], references: [id])
  userId String? @map("user_id")

  order   Order?  @relation(fields: [orderId], references: [id])
  orderId String? @map("order_id")

  orderItems OrderItem[]

  @@map("products")
}

model Category {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  title       String
  description String

  products Product[]

  Store   Store?  @relation(fields: [storeId], references: [id])
  storeId String? @map("store_id")

  @@map("categories")
}

model Color {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name  String
  value String

  products Product[]

  store   Store?  @relation(fields: [storeId], references: [id])
  storeId String? @map("store_id")

  @@map("colors")
}

model Review {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  text   String
  rating Int

  user   User?  @relation(fields: [userId], references: [id])
  userId String @map("user_id")

  product   Product? @relation(fields: [productId], references: [id])
  productId String?  @map("product_id")

  store   Store?  @relation(fields: [storeId], references: [id])
  storeId String? @map("store_id")

  @@map("reviews")
}

model Order {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  status EnumOrderStatus @default(PENDING)

  user   User?  @relation(fields: [userId], references: [id])
  userId String @map("user_id")

  products Product[]
  items    OrderItem[]

  total Float

  @@map("orders")
}

model OrderItem {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  quantity Int
  price    Float

  productId String   @map("product_id")
  product   Product? @relation(fields: [productId], references: [id])

  orderId String @map("order_id")
  order   Order? @relation(fields: [orderId], references: [id])

  storeId String @map("store_id")
  store   Store? @relation(fields: [storeId], references: [id])

  @@map("order_items")
}

enum EnumOrderStatus {
  PENDING
  PAYED
}
